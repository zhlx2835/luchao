<%@ page import="com.autonomy.aci.exceptions.AciException"%>
<%@ page import="com.autonomy.aci.exceptions.InvalidCategoryException"%>

<%
// read request parameters
ArrayList alExpandedCatID = updateExpandedCatIDList(session, service);
String sSelectedCatID 		= getSelectedCatID(session, service);

// get category hierarchy, either from session if it there or by reading from Laune if it isn't
Category topCategory = getCategoryHierarchy(session, service);

// if we have a category hierarchy, display it
if(topCategory != null)
{
%>
	<script type="text/javascript">
	<!--
		function submitSelectChannel(id)
		{
			document.selectChannel.<%= service.makeParameterName(ChannelsConstants.REQUEST_PARAM_SELECTED_ID) %>.value=id;

			document.selectChannel.submit();
		}

		function submitExpandChannel(id)
		{
			document.expandChannel.<%= service.makeParameterName(ChannelsConstants.REQUEST_PARAM_EXPAND_CONTRACT_ID) %>.value=id;

			document.expandChannel.submit();
		}

		function submitContractChannel(id)
		{
			document.contractChannel.<%= service.makeParameterName(ChannelsConstants.REQUEST_PARAM_EXPAND_CONTRACT_ID) %>.value=id;

			document.contractChannel.submit();
		}
	-->
	</script>

	<form name="selectChannel" action="<%= service.makeFormActionLink("") %>" method="POST">
		<%= service.makeAbstractFormFields() %>
		<input type="hidden" name="<%= service.makeParameterName(ChannelsConstants.REQUEST_PARAM_PAGE) %>" value="<%= sMainPage %>" />
		<input type="hidden" name="<%= service.makeParameterName(ChannelsConstants.REQUEST_PARAM_SELECTED_ID) %>" value="" />
	</form>

	<form name="expandChannel" action="<%= service.makeFormActionLink("") %>" method="POST">
		<%= service.makeAbstractFormFields() %>
		<input type="hidden" name="<%= service.makeParameterName(ChannelsConstants.REQUEST_PARAM_ACTION) %>" value="<%= ChannelsConstants.CAT_ACTION_EXPAND %>" />
		<input type="hidden" name="<%= service.makeParameterName(ChannelsConstants.REQUEST_PARAM_PAGE) %>" value="<%= sMainPage %>" />
		<input type="hidden" name="<%= service.makeParameterName(ChannelsConstants.REQUEST_PARAM_EXPAND_CONTRACT_ID) %>" value="" />
	</form>

	<form name="contractChannel" action="<%= service.makeFormActionLink("") %>" method="POST">
		<%= service.makeAbstractFormFields() %>
		<input type="hidden" name="<%= service.makeParameterName(ChannelsConstants.REQUEST_PARAM_ACTION) %>" value="<%= ChannelsConstants.CAT_ACTION_CONTRACT %>" />
		<input type="hidden" name="<%= service.makeParameterName(ChannelsConstants.REQUEST_PARAM_PAGE) %>" value="<%= sMainPage %>" />
		<input type="hidden" name="<%= service.makeParameterName(ChannelsConstants.REQUEST_PARAM_EXPAND_CONTRACT_ID) %>" value="" />
	</form>
	<table>
		<tr>
			<td nowrap="nowrap">
				<%=rb.getString("categoryTree_include.categories")%>
			</td>
		</tr>
		<%=	printChildLevel(topCategory,
												sSelectedCatID,
												alExpandedCatID,
												0,
												service.makeLink("AutonomyImages"),
												service.makeFormActionLink(""),
												service,
												sMainPage,
												session
											 ) %>
	</table>
<%
}
// if no category hierarchy, display error message
else
{
	out.println("Could not load category hierarchy");
}
%>
<%!
public String printChildLevel(Category category,
															String sSelectedCatID,
															ArrayList alExpandedCatID,
															int nLevel,
															String sImageURL,
															String sDisplayURI,
															PortalService service,
															String sMainPage,
															HttpSession session
														 )
{
	StringBuffer sbReturn = new StringBuffer();

	if (category != null)
	{
		String sName 							= category.getName();
		String sID 								= category.getUID();
		String sCatStatus 				= category.getStatus();
		ArrayList alSubCategories = category.getSubCategories();
		boolean bExpanded		= alExpandedCatID.contains(sID);

		// if there are no sub-categories it may be because they have not been read in from IDOL so
		// try to read them now
		if(alSubCategories.size() == 0)
		{
			alSubCategories = readCatHierarchy(session, category, service).getSubCategories();
			// set sub-cats on category so we don't have to read them again
			category.setSubCategories(alSubCategories);
		}

		// start row for this category
		sbReturn.append("<tr><td nowrap=\"nowrap\">");
		// indent
		for (int ii=0; ii<nLevel; ii++)
		{
			sbReturn.append("&nbsp;&nbsp;&nbsp;&nbsp;");
		}

		// expand/contract icon
		boolean bIsHomeCategory = sID.equals("0");
		if(alSubCategories.size() > 0 && !bIsHomeCategory)
		{
			if(bExpanded)
			{
				sbReturn.append("<a href=\"").append("javascript:submitContractChannel(\'").append(sID).append("\');\">")
									.append("<img src=\"").append(sImageURL).append("/contract.gif\" border=\"0\" alt=\"Expand this category\" >")
								.append("</a>");
			}
			else
			{
				sbReturn.append("<a href=\"javascript:submitExpandChannel(\'").append(sID).append("\');\">")
									.append("<img src=\"").append(sImageURL).append("/expand.gif\" border=\"0\" alt=\"Contract this category\" >")
								.append("</a>");
			}
		}
		else
		{
			sbReturn.append("<img alt=\"\" src=\"").append(sImageURL).append("/nochildren.gif\" border=\"0\">");
		}

		boolean bSelected 		= sID.equals(sSelectedCatID);
		String sFontStyle 		= (bSelected)?(" style=\";font-weight:bold\" "):("");
		String sFolderImage 	= getFolderImageFromStatus(sCatStatus, sImageURL);
		String sFolderToolTip = getFolderToolTipFromStatus(sCatStatus);

		StringBuffer sbCatMovingJavaScript = new StringBuffer();

/*
NOT CURRENTLY IMPLEMENTED
		sbCatMovingJavaScript.append(" class=\"dragable\" id=\"").append(sID)
												 .append("\" onClick=\"javascript:return linkMouseUp()\" ")
												 .append("onMouseOver=\"javascript:mouseOver(this)\" ");
*/
		sbReturn.append("<a ").append(sFontStyle).append(sbCatMovingJavaScript.toString())
						.append("href=\"javascript:submitSelectChannel(\'").append(sID).append("\');\">")
							.append("<img border=\"0\" src=\"").append(sFolderImage).append("\" alt=\"").append(sFolderToolTip).append("\" />")
							.append("&nbsp;").append(sName).append("</a>");

		// finish category row
		sbReturn.append("</td></tr>\n");

		// recurse through children if category has been expanded
		if(bExpanded)
		{
			Iterator itSubCategories = category.getSubCategories().iterator();
			while(itSubCategories.hasNext())
			{
				sbReturn.append(printChildLevel((Category)itSubCategories.next(),
																				sSelectedCatID,
																				alExpandedCatID,
																				nLevel + 1,
																				sImageURL,
																				sDisplayURI,
																				service,
																				sMainPage,
																				session
																			 ));
			}
		}
	}

	return sbReturn.toString();
}

private String getFolderToolTipFromStatus(String sStatus)
{
	String sToolTip = "Active";
	return sToolTip;
}

private String getFolderImageFromStatus(String sStatus, String sImageURL)
{
	String sFolder = "folder.gif";
	return sImageURL + "/" + sFolder;
}

private String getSelectedCatID(HttpSession session, PortalService service)
{
	// ID comes from either request or category session attribute, with request value overriding session value
	String sSelectedCatID = service.getSafeRequestParameter(service.makeParameterName(ChannelsConstants.REQUEST_PARAM_SELECTED_ID), "");
	if(!StringUtils.strValid(sSelectedCatID))
	{
		// no ID in request, read ID from category in session if there is one
		Category selectedCategory = (Category)session.getAttribute(ChannelsConstants.SESSION_ATTRIB_SELECTED_CAT);
		if(selectedCategory != null)
		{
			sSelectedCatID = selectedCategory.getUID();
		}
	}
	// default to home category
	if(sSelectedCatID == null)
	{
		sSelectedCatID = "0";
	}
	return sSelectedCatID;
}

private ArrayList updateExpandedCatIDList(HttpSession session, PortalService service)
{
	ArrayList alExpandedCatIDs = null;

	// are we expanding or contracting a category?
	String sCatID  = service.getSafeRequestParameter(service.makeParameterName(ChannelsConstants.REQUEST_PARAM_EXPAND_CONTRACT_ID), "");
	String sAction = service.getSafeRequestParameter(service.makeParameterName(ChannelsConstants.REQUEST_PARAM_ACTION), "");

	if(sAction.equals(ChannelsConstants.CAT_ACTION_EXPAND))
	{
		alExpandedCatIDs = addCategoryToExpandedList(session, sCatID);
	}
	else if(sAction.equals(ChannelsConstants.CAT_ACTION_CONTRACT))
	{
		alExpandedCatIDs = removeCategoryFromExpandedList(session, sCatID);
	}
	else
	{
		alExpandedCatIDs = (ArrayList)session.getAttribute(ChannelsConstants.SESSION_ATTRIB_EXPANDED_CAT_IDS);
	}
	// make sure the list is not null
	if(alExpandedCatIDs == null)
	{
		alExpandedCatIDs = initialiseExpandedList();
	}
	// set on session and return
	session.setAttribute(ChannelsConstants.SESSION_ATTRIB_EXPANDED_CAT_IDS, alExpandedCatIDs);

	return alExpandedCatIDs;
}

private ArrayList removeCategoryFromExpandedList(HttpSession session, String sCatID)
{
	// get expanded cat list from session, create new list if none found
	ArrayList alExpandedCatIDs = (ArrayList)session.getAttribute(ChannelsConstants.SESSION_ATTRIB_EXPANDED_CAT_IDS);
	if(alExpandedCatIDs != null)
	{
		// add cat id to expanded list if not already there
		if(alExpandedCatIDs.contains(sCatID))
		{
			alExpandedCatIDs.remove(sCatID);
		}

		// set updated list on session
		session.setAttribute(ChannelsConstants.SESSION_ATTRIB_EXPANDED_CAT_IDS, alExpandedCatIDs);
	}

	return alExpandedCatIDs;
}

private ArrayList addCategoryToExpandedList(HttpSession session, String sCatID)
{
	// get expanded cat list from session, create new list if none found
	ArrayList alExpandedCatIDs = (ArrayList)session.getAttribute(ChannelsConstants.SESSION_ATTRIB_EXPANDED_CAT_IDS);
	if(alExpandedCatIDs != null)
	{
		// add cat id to expanded list if not already there
		if(!alExpandedCatIDs.contains(sCatID))
		{
			alExpandedCatIDs.add(sCatID);
		}

		// set updated list on session
		session.setAttribute(ChannelsConstants.SESSION_ATTRIB_EXPANDED_CAT_IDS, alExpandedCatIDs);
	}

	return alExpandedCatIDs;
}

private ArrayList initialiseExpandedList()
{
	ArrayList alExpandedCatIDs = new ArrayList();
	// always expand the home category
	alExpandedCatIDs.add(Category.HOME_CATEGORY_ID);
	return alExpandedCatIDs;
}

private Category getCategoryHierarchy(HttpSession session, PortalService service)
{
	// read category hierarchy from session, read new cat hierarchy from Laune if none found
	Category catHierarchy = (Category)session.getAttribute(ChannelsConstants.SESSION_ATTRIB_CAT_HIERARCHY);

	if(catHierarchy == null)
	{
		// no cat hierarchy set on session create top most one
		catHierarchy = readCatHierarchy(session, new Category("0"), service);
	}
	if(catHierarchy != null)
	{
		session.setAttribute(ChannelsConstants.SESSION_ATTRIB_CAT_HIERARCHY, catHierarchy);
	}

	return catHierarchy;
}

private Category readCatHierarchy(HttpSession session, Category category, PortalService service)
{
	Category catTree = null;
	// retrieve Laune service from session
	IDOLService idol = (IDOLService)session.getAttribute(CATConstants.SESSION_ATTRIB_IDOL);
    // Get user details
    String sUsername = (service.getUser()).getName();
	if(idol != null)
	{
		try
		{
			catTree = idol.useChannelsFunctionality().getCategoryHierarchy(category, false, sUsername);
		}
		catch(InvalidCategoryException ice)
		{
		 	// root category is invalid!
			setError(session, "The Laune service appears to be corrupted. Please check the Laune component of IDOL server as soon as possible.");
		}
		catch(AciException acie)
		{
		 	// root category is invalid!
			setError(session, "There was a problem in communicating with the Laune service. <br />Error message: " + acie.getMessage());
		}
	}
	else
	{
		session.setAttribute(ChannelsConstants.SESSION_ATTRIB_ERROR_MESSAGE, "The Laune service could not be found. Please try again.");
	}
	return catTree;
}

private void mylog(String s)
{
	System.out.println(s);
}
%>



