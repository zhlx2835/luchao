<%
/*


$Id: //depot/products/webinterfaces/portlets/common/displayResultList_include.jspf#17 $
Copyright (c) 2007-2008, Autonomy Systems Ltd.
Last modified by $Author: xiaofeiw $ on $Date: 2008/08/22 $

Displays the result documents contained returned from a query/suggest to IDOL
Required variables:
ResultList resultList - the query/suggest results
String username - the name of the current user
String imageURL - the path to the image folder
String threshold - the threshold to use in further queries/suggestions
String numResults - the number of results to ask for in further queries/suggestions
ResultListDisplayOptions displayOptions - defines what should be displayed for this result set
*/
%>

<%@ page import="java.io.File" %>
<%@ page import="java.util.ArrayList" %>
<%@ page import="com.autonomy.APSL.PiB4ServiceInterface" %>
<%@ page import="com.autonomy.aci.businessobjects.ResultDocument" %>
<%@ page import="com.autonomy.aci.businessobjects.ResultList" %>
<%@ page import="com.autonomy.portlet.constants.CommonConstants"%>
<%@ page import="com.autonomy.utilities.HTTPUtils" %>
<%@ page import="com.autonomy.utilities.JavaScriptUtils" %>
<%@ page import="com.autonomy.utilities.StringUtils" %>
<%@ page import="com.autonomy.portal4.ConfigNotReadException" %>
<%@ page import="com.autonomy.portal4.UserInfo" %>
<%@ page import="com.autonomy.portal4.PortalDistributor" %>
<%@ page import="com.autonomy.portal4.PortalInfo" %>

<%

String refCharacterEncoding = service.readConfigParameter(CommonConstants.REFERENCE_ENCODING, CommonConstants.DEFAULT_REF_ENCODING );
String userHost = service.readConfigParameter(CommonConstants.CONFIG_NORE_HOST, "");
String userPort = service.readConfigParameter(CommonConstants.CONFIG_NORE_PORT, "");

// turn off emailing and agent creating if this is the (PiB4) default user
if(isDefaultUser(service))
{
	displayOptions.setShowingAgentLink(false);
	displayOptions.setShowingEmailLink(false);
}

if(resultList == null || resultList.getDocumentCount() == 0)
{
	// got no results
	if(displayOptions.isShowingNoResults())
	{
%>
		<tr>
			<td>
				<font class="<%= service.getCSSClass(service.TEXT_2) %>">
					<%=rb.getString("displayResult_include.noResults")%>
				</font>
			</td>
		</tr>
<%
	}
}
else
{
	// bit of a hack so that a new window is only opened for results displayed in the porlets while autosuggest recycles its window.
	String sTargetWindow = "result";
	if(displayOptions.isRecyclingWindows())
	{
		sTargetWindow 		= "_parent";
	}

	String usernameRequestParameter = "?username=" + StringUtils.encryptString(username);
	StringBuffer sbCommonParameters = new StringBuffer(usernameRequestParameter);
	sbCommonParameters.append("&threshold=");
	sbCommonParameters.append(threshold);
	sbCommonParameters.append("&numresult=");
	sbCommonParameters.append(numResults);
	sbCommonParameters.append("&display=");
	sbCommonParameters.append(displayOptions.toString());

	StringBuffer autoSuggestURL = new StringBuffer(service.makeLink("autosuggest.jsp"));
	StringBuffer standaloneURL = new StringBuffer(service.makeLink("standalonesuggest.jsp"));
	StringBuffer emailResultURL = new StringBuffer(service.makeLink("emailresult.jsp"));
	StringBuffer createAgentURL = new StringBuffer(service.makeLink("createagent.jsp"));

	autoSuggestURL.append(sbCommonParameters.toString());
	standaloneURL.append(sbCommonParameters.toString());
	emailResultURL.append(usernameRequestParameter).append("&userhost=").append(StringUtils.encryptString(userHost)).append("&userport=").append(StringUtils.encryptString(userPort));
	createAgentURL.append(usernameRequestParameter);


	// loop through result entries
	ArrayList resultDocuments = resultList.getDocuments();
	for(int resultIdx = 0; resultIdx < resultDocuments.size(); resultIdx++)
	{
		ResultDocument resultDocument = (ResultDocument)resultDocuments.get(resultIdx);

		// grab info from result document
		int nRelevence 					= (int)resultDocument.getWeight();
		String sTitle 					= resultDocument.getTitle();
		String sURL 						= resultDocument.getDocReference();
		String sDatabase 				= resultDocument.getDatabase();
		String sSummary 				= resultDocument.getSummary();
		String sResultIconValue	= resultDocument.getContentFieldValue(service.readConfigParameter("DocImageFieldName", "FILEEXTENSION"),	"");
		String sQuickSummary		= resultDocument.getContentFieldValue("SUMMARY", "");
		String sSource					= resultDocument.getContentFieldValue("DREDBNAME");
		String sAuthor	 				= resultDocument.getContentFieldValue("AUTHOR");
		String sSize	 					= resultDocument.getContentFieldValue("PAGESIZE",	"");

		// last attempt to get a title
		if(!StringUtils.strValid(sTitle))
		{
			sTitle = getTitleFromSummary(sSummary);
		}

		String fileImagePath = getImagePathFromIconValue(sResultIconValue, imageURL, application, service);
		String detailedInfo = buildDetailedInfo(sSource, sAuthor, StringUtils.atoi(sSize, 0) / 1024, rb);

		StringBuffer docRefRequestParameters = new StringBuffer();
		docRefRequestParameters.append("&url=");
		// must use request encoding to URL encode reference when talking between pages in web app
		docRefRequestParameters.append(HTTPUtils.URLEncode(sURL, refCharacterEncoding));
		docRefRequestParameters.append("&refencoding=");
		docRefRequestParameters.append(resultDocument.getReferenceEncoding());
		docRefRequestParameters.append("&id=");
		docRefRequestParameters.append(resultDocument.getDocID());

		// finish off autosuggest/get contents/etc URI arguments
		StringBuffer autoSuggestActURL = new StringBuffer(autoSuggestURL.toString());
		autoSuggestActURL.append(docRefRequestParameters);
		autoSuggestActURL.append("&links=");
		autoSuggestActURL.append(HTTPUtils.URLEncode(StringUtils.combine(resultDocument.getLinks(), ","), refCharacterEncoding));

		String sGetContentsURL = autoSuggestActURL.toString() + "&command=getcontent";
		String sGetHighlightsURL = autoSuggestActURL.toString() + "&command=gethighlights";
		String sGetSummaryURL = autoSuggestActURL.toString() + "&command=getsummary";
		// add extra file info if this result is a DocMan server document
		if(resultIsDocManDocument(sSource, service))
		{
			autoSuggestActURL.append("&filename=");
			autoSuggestActURL.append(HTTPUtils.URLEncode(sTitle, refCharacterEncoding));
			autoSuggestActURL.append("&command=ShowDocManDoc");
		}
		String sTitleURL = autoSuggestActURL.toString();

		// finish off standalone, create agent and email results URLs
		StringBuffer sbStandaloneSuggestActURL = new StringBuffer(standaloneURL.toString());
		sbStandaloneSuggestActURL.append(docRefRequestParameters);
		StringBuffer sbCreateAgentActURL = new StringBuffer(createAgentURL.toString());
		sbCreateAgentActURL.append(docRefRequestParameters);
		StringBuffer sbEmailResultActURL = new StringBuffer(emailResultURL.toString());
		sbEmailResultActURL.append(docRefRequestParameters);

		// sort out Outlook references - these have a trailing "&attach..." that must be removed
		if(sURL.startsWith("outlook"))
		{
			sURL = stripOutlookURL(sURL);
		}

		// output the result row
%>
			<tr>
<%
				if(displayOptions.isShowingCheckboxes())
				{
%>
					<td width="20" align="center">
						<input type="checkbox" name="<%= service.makeParameterName(CommonConstants.REQUEST_PARAM_SUGGEST_DOCS) %>" value="<%= resultIdx %>">
					</td>
<%
				}
				else
				{
%>
					<td></td>
<%
				}
				if(displayOptions.isShowingWeight())
				{
%>
					<td align="left" width="30">
						<font class="<%= service.getCSSClass(service.TEXT_2) %>" color="red">
							<%= nRelevence %>%&nbsp;&nbsp;
						</font>
					</td>
<%
				}
				else
				{
%>
					<td></td>
<%
				}
				if(displayOptions.isShowingTitle())
				{
%>
					<td align="left">
						<a title="<%= StringUtils.XMLEscape(sQuickSummary) %>" href="<%= StringUtils.XMLEscape(sTitleURL) %>" target="<%= sTargetWindow %>">
							<font class="<%= service.getCSSClass(service.TEXT_2) %>" >
								<b><%= StringUtils.XMLEscape(sTitle) %></b>&nbsp;
							</font>
						</a>
					</td>
<%
				}
%>
				<!-- OPTIONS -->
				<td nowrap align="right" >
<%
				if(displayOptions.isShowingContentOptions())
				{
%>
						<a href="<%= StringUtils.XMLEscape(sGetContentsURL) %>" target="<%= sTargetWindow %>"
							><img alt="Contents" src="<%= imageURL %>/content_normal.gif" border="0" width="9" height="12"
						/></a>

						<a href="<%= StringUtils.XMLEscape(sGetHighlightsURL) %>" target="<%= sTargetWindow %>"
							><img alt="Highlighted contents" src="<%= imageURL %>/content_highlighted.gif" border="0" width="9" height="12"
						/></a>

						<a href="<%= StringUtils.XMLEscape(sGetSummaryURL) %>" target="<%= sTargetWindow %>"
							><img alt="Summary" src="<%= imageURL %>/content_summary.gif" border="0" width="9" height="12"
						/></a>
<%
				}
				if(displayOptions.isShowingAgentLink())
				{
%>
						<a href="<%= StringUtils.XMLEscape(sbCreateAgentActURL.toString()) %>" target="<%= sTargetWindow %>"
							><img alt="Create agent based on this story" src="<%= imageURL %>/monitorstory.gif" border="0"
						/></a>
<%
				}
				if(displayOptions.isShowingEmailLink())
				{
%>

						<a href="<%= StringUtils.XMLEscape(sbEmailResultActURL.toString()) %>" target="<%= sTargetWindow %>"
							><img alt="Email this link" src="<%= imageURL %>/maillink2friend.gif" border="0"
						/></a>
<%
				}
%>
				</td>
			</tr>
			<tr>
				<td></td>
<%
				if(displayOptions.isShowingIcons())
				{
%>
					<td align="left" valign="middle">
						<img hspace="6" src="<%= fileImagePath %>" alt=""/>
					</td>
<%
				}
				else
				{
%>
					 <td>
						<img src="<%= imageURL %>/spacer.gif" alt="" >
					 </td>
<%
				}

				if(displayOptions.isShowingSummary())
				{
%>
					<td colspan="3" align="left">
						<font class="<%= service.getCSSClass(service.TEXT_2) %>">
							<%=StringUtils.XMLEscape(sSummary)%>
						</font>
					</td>
<%
				}
%>
			</tr>
			<tr>
				<td colspan="2">
				</td>
				<td>
<%
				if(StringUtils.strValid(detailedInfo)){
%>
					<font class="<%= service.getCSSClass(service.TEXT_2) %>">
						<%= detailedInfo %>
					</font>
<%
				}
%>
				</td>
			</tr>
<%
			if(displayOptions.isShowingSimilar())
			{
%>
				<tr>
					<td colspan="2">
					</td>
					<td>
						<font class="<%= service.getCSSClass(service.TEXT_2) %>">
							<a href="javascript:void(0);" onClick="window.open('<%= JavaScriptUtils.escape(sbStandaloneSuggestActURL.toString()) %>', 'similarResults', 'fullscreen=no,toolbar=no,status=no,menubar=no,scrollbars=no,resizable=no,directories=no,location=no,width=800,height=270,left=100,top=100', false);">
								<strong><%=rb.getString("displayResult_include.similarDoc")%></strong>
							</a>
						</font>
					</td>
					<td>
					</td>
				</tr>
<%
				// this fixes an intermittent problem with multi-byte characters which causes the
				// result entries and some html formatting to be sent to the browser in the wrong
				// order
				out.flush();
			}
%>
			<tr><td height="6"></td></tr>
<%
	}	//for(all documents in result list)
}
%>

<%!
private String stripOutlookURL(String sURL)
{
	int nAmpIdx = sURL.lastIndexOf("&attach");
	if(nAmpIdx > -1)
	{
		sURL = sURL.substring(0, nAmpIdx);
	}
	return sURL;
}
private String buildDetailedInfo(String sSource, String sAuthor, int nSizeInKB, ResourceBundle rb)
{
	StringBuffer detailedInfo = new StringBuffer();
	if(sSource != null)
	{
        detailedInfo.append("[");
		try
        {
            String source = rb.getString("standardResults_include.source");
            detailedInfo.append(source);
        }
        catch(Exception e)
        {

        }
        detailedInfo.append(" ");
		detailedInfo.append(sSource);
		detailedInfo.append("]&nbsp;");
	}
	if(sAuthor != null)
	{
		detailedInfo.append("[");
        try
        {
            String author = rb.getString("standardResults_include.author");
            detailedInfo.append(author);
        }
        catch(Exception e)
        {

        }
        detailedInfo.append(" ");
		detailedInfo.append(sAuthor);
		detailedInfo.append("]&nbsp;");
	}
	if(nSizeInKB > 0)
	{
		detailedInfo.append("[");
        try
        {
            String size = rb.getString("standardResults_include.size");
            detailedInfo.append(size);
        }
        catch(Exception e)
        {

        }
        detailedInfo.append(" ");
		detailedInfo.append(nSizeInKB);
		detailedInfo.append(" kB]");
	}
	return detailedInfo.toString();
}
private String getImagePathFromIconValue(String sIconValue, String imageURL, ServletContext application, PortalService service)
{
	// default image path - returned if no image corresponding to the icon name is found
	String sImagePath = imageURL + "/" + (String)service.getParameter("DefaultLogoName");

	if(StringUtils.strValid(sIconValue))
	{
		// there are 3 possible types of icon value:
		//	- extension name with leading '.' (remove leading '.' and add .gif extension)
		//	- data source name without extension (add .gif extension)
		// 	- data source name with extension (do nothing)

		if(sIconValue.startsWith("."))
		{
			sIconValue = sIconValue.substring(1, sIconValue.length());
		}

		// add gif extension to icon name if it does not have one
		if(!sIconValue.endsWith(".gif"))
		{
			sIconValue = sIconValue + ".gif";
		}

		// see if a file corresponding to the extension exists - the path to the image files depends on where this file
		// has been included.
		String sFilePath = new StringBuffer("/portlets/AutonomyImages/").append(sIconValue).toString();

		// work out URL to image file
		if(new File(application.getRealPath(sFilePath)).exists())
		{
			sImagePath = imageURL + "/" + sIconValue;
		}
		else
		{
			// use default provided
		}
	}

	return sImagePath;
}

private static String getTitleFromSummary(String sSummary)
{
	String sTitle = "";
	int nEndTitleIdx = 80;
	if(nEndTitleIdx > sSummary.length() - 1)
	{
		nEndTitleIdx = sSummary.length() - 1;
	}
	if(nEndTitleIdx > 0)
	{
		sTitle = sSummary.substring(0, nEndTitleIdx);
	}
	else
	{
		sTitle = "";
	}
	return sTitle;
}

/**
 *	Establishes whether a document came from a database that contains DocMan documents as
 *	configured by the DocManDatabases portlet parameter.
 */
private static boolean resultIsDocManDocument(String sSource, PortalService service)
{
	boolean bIsDocManDoc = false;
	String sDocManDatabases = service.readConfigParameter("DocManDatabases", "");
	if(StringUtils.strValid(sDocManDatabases))
	{
		// result is a DocMan doc if its source is one of those databases in the DocManDatabases CSV
		int nSourceIdx = StringUtils.isStringInStringArray(StringUtils.split(sDocManDatabases, ","),
																										 	sSource,
																										 	true);
		bIsDocManDoc = nSourceIdx != -1;
	}

	return bIsDocManDoc;
}
//Check whether the current user is the default or default setup
private boolean isDefaultUser(PortalService service)
{
	return StringUtils.isTrue((String)service.getSafeSessionAttribute(CommonConstants.SESSION_ATTRIB_ISDEFAULTUSER ,"false"));

}
%>
