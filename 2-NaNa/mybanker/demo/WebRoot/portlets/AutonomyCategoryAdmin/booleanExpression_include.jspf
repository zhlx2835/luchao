
<%
	int BOOLEAN_MAX_ROWS = 3;
	int BOOLEAN_MAX_COLS = 3;

        String booleanTraining = (String) category.getBooleanTraining();

	String booleanTrainingInputName = service.makeParameterName(CATConstants.REQUEST_PARAM_TRAINING_BOOLEAN);
%>

<script>

document.expando = false;
var bCurrentlySelecting = false;
var nCurrentWord = 0;
var KEY_SPACE = 32;
var KEY_UPARROW = 38;
var KEY_DOWNARROW = 40;
var KEY_TAB = 9;
var KEY_ENTER = 13;
var nCurrentExpandRow = 0;
var BOOLEAN_MAX_ROWS = 3;
var BOOLEAN_MAX_COLS = 3;
var BOOLEAN_LOGIC_TERMS = new Array("AND","OR","NOT","XOR","EOR","BEFORE","AFTER");
var aCurrentExpandCols = new Array(BOOLEAN_MAX_ROWS);
var aTextValues = new Array(BOOLEAN_MAX_ROWS);
var aSelectValues = new Array(BOOLEAN_MAX_ROWS);

for (nRowIdx=0;nRowIdx < BOOLEAN_MAX_ROWS;nRowIdx++)
{
	aCurrentExpandCols[nRowIdx] = 0;
}

var temp = "var words = new Array(";
for (nRowIdx=0; nRowIdx<BOOLEAN_LOGIC_TERMS.length; nRowIdx++)
{
	if (nRowIdx != 0)
		temp=temp+",";

	temp=temp+"\"" + BOOLEAN_LOGIC_TERMS[nRowIdx] + "\"";
}

for (nRowIdx=0; nRowIdx<10; nRowIdx++)
{
	aTextValues[nRowIdx] = new Array(BOOLEAN_MAX_COLS);
	aSelectValues[nRowIdx] = new Array(BOOLEAN_MAX_COLS);

	for (nColIdx=0; nColIdx<10; nColIdx++)
	{
		aTextValues[nRowIdx][nColIdx] = "";
		aSelectValues[nRowIdx][nColIdx] = "";
	}
}

temp=temp+");\n\n";
eval(temp);
var bPressedSelect = false;

function stringReplace(str, from, to)
{
	var arr = str.split(from);
	var ret = arr[0];

	for (nRowIdx=1;nRowIdx<arr.length;nRowIdx++)
	{
		ret = ret + to + arr[nRowIdx];
	}

	return ret;
}

// turns "   aaa bbb   " into "aaa bbb"
function topNtailWhiteSpace(str)
{
	var ret = str;

	// top
	while (ret.length > 0 && ret.charAt(0) == ' ')
	{
		ret = ret.substring(1);
	}

	// tail
	while (ret.length > 0 && ret.charAt(ret.length-1) == ' ')
	{
		ret = ret.substring(0,ret.length-1);
	}

	return ret;
}

// turns "aaa    bbb" into "aaa bbb"
function removeMultipleWhiteSpace(str)
{
	var ret = "";

	if (str.length > 0)
	{
		ret = str.charAt(0);

		for(nRowIdx=1;nRowIdx<str.length;nRowIdx++)
		{
			if (str.charAt(nRowIdx-1) != ' ' || str.charAt(nRowIdx) != ' ')
			{
				ret += str.charAt(nRowIdx);
			}
		}
	}
	return ret;
}

function isBoolWord(str)
{
	for (nRowIdx=0;nRowIdx<words.length;nRowIdx++)
	{
		if (str == words[nRowIdx])
			return true;
	}

	return false;
}

function countOcc(str, ch)
{
	var nRet = 0;

	for (nRowIdx=0;nRowIdx<str.length-1;nRowIdx++)
	{
		if (str.substring(nRowIdx,nRowIdx+ch.length) == ch)
			nRet++;
	}

	return nRet;
}

// puts a space before and after all brackets, for checking
function spaceOutBrackets(str)
{
	var ret = stringReplace(str," ( ","(");
	ret = stringReplace(ret," (","(");
	ret = stringReplace(ret,"( ","(");
	ret = stringReplace(ret,"("," ( ");

	ret = stringReplace(ret," ) ",")");
	ret = stringReplace(ret," )",")");
	ret = stringReplace(ret,") ",")");
	ret = stringReplace(ret,")"," ) ");

	return ret;
}

// removes space inside brackets
function spaceInBrackets(str)
{
	var ret = stringReplace(str," ( "," (");
	ret = stringReplace(ret," ) ",") ");

	return ret;
}

function refreshBool(boolTraining)
{
	if (bPressedSelect == false)
	{
		var sBool = boolTraining;

		// sBool = spaceOutBrackets(sBool);
		sBool = removeMultipleWhiteSpace(sBool);

		if (sBool.length > 0)
		{
			sBool = " " + sBool + " ";
			sBool = stringReplace(sBool," and "," AND ");
			sBool = stringReplace(sBool," or "," OR ");
			sBool = stringReplace(sBool," not "," NOT ");
			sBool = stringReplace(sBool," xor "," XOR ");
			sBool = stringReplace(sBool," eor "," EOR ");
			sBool = stringReplace(sBool," near "," NEAR ");

			sBool = topNtailWhiteSpace(sBool);

				// sBool = " " + sBool + " ";
				// sBool = spaceInBrackets(sBool);
				sBool = topNtailWhiteSpace(sBool);

				if (sBool == "( () )")
					sBool = "";

				document.cattraining['<%=booleanTrainingInputName%>'].value = sBool;
		}
	}

	bCurrentlySelecting = false;
	bPressedSelect = false;
}

function getSelectBoxArray(nRow, nCol)
{
	setSelectValue(nRow,nCol,"AND");
	var ret = "<select onchange='setSelectValue("+nRow+","+nCol+",this.value)' name='sel_r" + nRow + "c" + nCol + "'>"

	for (nRowIdx=0;nRowIdx<words.length;nRowIdx++)
	{
		ret += "<option value='" +words[nRowIdx] + "'>" + words[nRowIdx];
	}

	ret += "</select>";

	return ret;
}

function expandUp()
{
	if (nCurrentExpandRow > 0)
	{
		var vDownImage = document.getElementById("downimage");
		var vUpImage = document.getElementById("upimage");
		var vLeftImage_nCurrentExpandRow = document.getElementById("leftimage_" + nCurrentExpandRow);
		var vRightImage_nCurrentExpandRow = document.getElementById("rightimage_" + nCurrentExpandRow);

		if (nCurrentExpandRow == 1)
		{
			vUpImage.innerHTML = "<img src='<%=sImageURL%>/uparrow_grey.gif'/>";
		}

		if (nCurrentExpandRow < BOOLEAN_MAX_ROWS)
		{
			vDownImage.innerHTML = "<a href='javascript:expandDown()'><img src='<%=sImageURL%>/downarrow.gif'/></a>";
		}

		eval("vLeftImage_nCurrentExpandRow" + ".innerHTML = ''");
		eval("vRightImage_nCurrentExpandRow" + ".innerHTML = ''");

		for (ii=0;ii<=aCurrentExpandCols[nCurrentExpandRow];ii++)
		{
			setTextValue(nCurrentExpandRow,ii,"");

			var vSpan_rnCurrentExpandRow_cii = document.getElementById("span_r"+nCurrentExpandRow+"c"+ii);

			eval("vSpan_rnCurrentExpandRow_cii" + ".innerHTML = ''");
			eval("vSpan_rnCurrentExpandRow_cii" + ".style.fontSize = '0pt'");
		}

		aCurrentExpandCols[nCurrentExpandRow] = 0;

		nCurrentExpandRow--;

		var vExpandSelect_nCurrentExpandRow = document.getElementById("vexpandselect_" + nCurrentExpandRow);

		eval("vExpandSelect_nCurrentExpandRow" + ".innerHTML = ''");
		eval("vExpandSelect_nCurrentExpandRow" + ".style.fontSize = '0pt'");
	}
	makeBoolString();
}

function expandDown()
{
	if (nCurrentExpandRow < BOOLEAN_MAX_ROWS-1)
	{
		var vExpandSelect_nCurrentExpandRow = document.getElementById("vexpandselect_" + nCurrentExpandRow);

		eval("vExpandSelect_nCurrentExpandRow" + ".innerHTML = \"<br><br>" + getSelectBoxArray(nCurrentExpandRow, 9) + "<br><br>\"");

		nCurrentExpandRow++;

		var vSpan_rnCurrentExpandRow_c0 = document.getElementById("span_r"+nCurrentExpandRow+"c0");

		eval("vSpan_rnCurrentExpandRow_c0" + ".innerHTML = \"<input type=text size=10 onkeyup='setTextValue("+nCurrentExpandRow+","+0+",this.value);' name='text_r" + nCurrentExpandRow + "c0' value=''>\"");

		var vDownImage = document.getElementById("downimage");
		var vUpImage = document.getElementById("upimage");

		if (nCurrentExpandRow == BOOLEAN_MAX_ROWS-1)
			vDownImage.innerHTML = "<img src='<%=sImageURL%>/downarrow_grey.gif'/>";

		if (nCurrentExpandRow > 0)
			vUpImage.innerHTML = "<a href='javascript:expandUp()'><img src='<%=sImageURL%>/uparrow.gif'/></a>";

		var vLeftImage_nCurrentExpandRow = document.getElementById("leftimage_" + nCurrentExpandRow);
		var vRightImage_nCurrentExpandRow = document.getElementById("rightimage_" + nCurrentExpandRow);

		eval("vLeftImage_nCurrentExpandRow" + ".innerHTML = \"<img src='<%=sImageURL%>/leftarrow_grey.gif'/>\"");
		eval("vRightImage_nCurrentExpandRow" + ".innerHTML = \"<a href='javascript:expandRight(" + nCurrentExpandRow + ")'><img src='<%=sImageURL%>/rightarrow.gif'/></a>\"");
	}
	makeBoolString();
}

function expandLeft(nRow)
{
	var nCol = aCurrentExpandCols[nRow];

	var vLeftImage_nRow = document.getElementById("leftimage_" + nRow);
	var vRightImage_nRow = document.getElementById("rightimage_" + nRow);
	var vSpan_nRow_nCol = document.getElementById("span_r" + nRow + "c" + nCol);

	setTextValue(nRow,nCol,"");

	if (nCol > 0)
	{
		if (nCol == 1)
			eval("vLeftImage_nRow" + ".innerHTML = \"<img src='<%=sImageURL%>/leftarrow_grey.gif'/>\"");
		else
			eval("vLeftImage_nRow" + ".innerHTML = \"<a href='javascript:expandLeft(" + nRow + ")'><img src='<%=sImageURL%>/leftarrow.gif'/></a>\"");

		if (nCol < BOOLEAN_MAX_COLS)
			eval("vRightImage_nRow" + ".innerHTML = \"<a href='javascript:expandRight(" + nRow + ")'><img src='<%=sImageURL%>/rightarrow.gif'/></a>\"");
		else
			eval("vRightImage_nRow" + ".innerHTML = \"<img src='<%=sImageURL%>/rightarrow_grey.gif'/>\"");

		eval("vSpan_nRow_nCol" + ".innerHTML = \"\"");

		aCurrentExpandCols[nRow] = nCol-1;
	}
	makeBoolString();
}

function expandRight(nRow)
{
	var nCol = aCurrentExpandCols[nRow];

	var vLeftImage_nRow = document.getElementById("leftimage_" + nRow);
	var vRightImage_nRow = document.getElementById("rightimage_" + nRow);

	if (nCol < BOOLEAN_MAX_COLS-1)
	{

		nCol++;

		var vSpan_nRow_nCol = document.getElementById("span_r" + nRow + "c" + nCol);

		if (nCol > 0)
			eval("vLeftImage_nRow" + ".innerHTML = \"<a href='javascript:expandLeft(" + nRow + ")'><img src='<%=sImageURL%>/leftarrow.gif'/></a>\"");
		else
			eval("vLeftImage_nRow" + ".innerHTML = \"<img src='<%=sImageURL%>/leftarrow_grey.gif'/>\"");

		if (nCol == BOOLEAN_MAX_COLS-1)
			eval("vRightImage_nRow" + ".innerHTML = \"<img src='<%=sImageURL%>/rightarrow_grey.gif'/>\"");
		else
			eval("vRightImage_nRow" + ".innerHTML = \"<a href='javascript:expandRight(" + nRow + ")'><img src='<%=sImageURL%>/rightarrow.gif'/></a>\"");

		aCurrentExpandCols[nRow] = nCol;

		eval("vSpan_nRow_nCol" + ".innerHTML = \"&nbsp;" + getSelectBoxArray(nRow, nCol) + "&nbsp;<input type=text size=10 onkeyup='setTextValue("+nRow+","+nCol+",this.value);' name='text_r" + nRow + "c" + nCol + "' value=''>\"");
	}
	makeBoolString();
}

function makeBoolString()
{
	var str = "";

	frm = document.cattraining;

	for (nRowIdx=0;nRowIdx<=nCurrentExpandRow;nRowIdx++)
	{
		str += "(";

		for (nColIdx=0;nColIdx<=aCurrentExpandCols[nRowIdx];nColIdx++)
		{
			var textValue = getTextValue(nRowIdx,nColIdx);
			str += textValue;

			if (nColIdx<aCurrentExpandCols[nRowIdx])
			{
				k=nColIdx+1;

				var selValue = getSelectValue(nRowIdx,k);

				str += " " + selValue + " ";
			}
		}

		str += ")";

		if (nRowIdx<nCurrentExpandRow)
		{
			var selValue = getSelectValue(nRowIdx,9);
			str += " " + selValue + " ";
		}
	}
	refreshBool(str);
}

function populateBoolean(booleanTraining)
{
	var sBool = booleanTraining;
	var frm = document.cattraining;

	var nSections = countOcc(sBool, ') ');

	var outerNestedSections = countOcc(sBool, ' ) ');

	for(outer=0; outer<=outerNestedSections; outer++)
	{
		var sEnd = sBool.indexOf(' )');
		var sExpression = sBool.substring(0,sEnd+2);

		var innerNestedSections = countOcc(sExpression, ' (');

		for(inner=0; inner<innerNestedSections; inner++)
		{
			if(inner == 0)
			{
				var sInnerExpression = sExpression.substring(sExpression.indexOf(' (')+2,sExpression.indexOf(') '));

				sExpression = sExpression.substring(sExpression.indexOf(') ')+2,sExpression.length);

				var vSpan_rii_ckk = document.getElementById("span_r"+outer+"c"+inner);
				vSpan_rii_ckk.innerHTML = "<input type='text' size='10' name='text_r"+outer+"c"+inner+"' onkeyup='setTextValue("+outer+","+inner+",this.value);' value='"+sInnerExpression+"'>";
				setTextValue(outer,inner,sInnerExpression);
			}
			else
			{
				expandRight(outer);
				var sInnerOperator = sExpression.substring(0,sExpression.indexOf(' ('));

				sExpression = sExpression.substring(sExpression.indexOf(' (')+1,sExpression.length);
				var sInnerExpression = sExpression.substring(1,sExpression.indexOf(') '));

				sExpression = sExpression.substring(sExpression.indexOf(') ')+2,sExpression.length);

				var vSpan_rii_cll = document.getElementById("span_r"+outer+"c"+inner);

				var ret = "&nbsp;<select onchange='setSelectValue("+outer+","+inner+",this.value)' value='"+sInnerOperator+"' name='sel_r" + outer + "c" + inner + "'>";

				for (nRowIdx=0;nRowIdx<words.length;nRowIdx++)
				{
					if(words[nRowIdx] == sInnerOperator)
					{
						ret += "<option value='" +words[nRowIdx] + "' selected>" + words[nRowIdx];
					}
					else
					{
						ret += "<option value='" +words[nRowIdx] + "'>" + words[nRowIdx];
					}
				}

				ret += "</select>&nbsp;<input type=text size=10 onkeyup='setTextValue("+outer+","+inner+",this.value);' name='text_r" + outer + "c" + inner + "' value='"+sInnerExpression+"'>"

				vSpan_rii_cll.innerHTML = ret;

				setTextValue(outer,inner,sInnerExpression);
				setSelectValue(outer,inner,sInnerOperator);
			}

		}


		if(outer != outerNestedSections)
		{
			expandDown();

			sBool = sBool.substring(sEnd+3,sBool.length);
			var sOperator = sBool.substring(0,sBool.indexOf(' ( '));
			sBool = sBool.substring(sBool.indexOf(' ( ')+1,sBool.length);

			var vSpan_rii_c9 = document.getElementById("vexpandselect_"+outer);

			var ret = "<br><br><select onchange='setSelectValue("+outer+",9,this.value);' value='"+sOperator+"' name='sel_r" + outer + "c9'>";

			for (nRowIdx=0;nRowIdx<words.length;nRowIdx++)
			{
				if(words[nRowIdx] == sOperator)
				{
					ret += "<option value='" +words[nRowIdx] + "' selected>" + words[nRowIdx];
				}
				else
				{
					ret += "<option value='" +words[nRowIdx] + "'>" + words[nRowIdx];
				}
			}

			ret += "</select><br><br>";

			vSpan_rii_c9.innerHTML = ret;

			setSelectValue(outer,9,sOperator);
		}
	}

	frm['<%=booleanTrainingInputName%>'].value = booleanTraining;
}

function setTextValue(row,column,value)
{
	aTextValues[row][column] = " ("+value+") ";
}

function getTextValue(row,column)
{
	return aTextValues[row][column];
}

function setSelectValue(row,column,value)
{
	aSelectValues[row][column] = value;

	makeBoolString();
}

function getSelectValue(row,column)
{
	return aSelectValues[row][column];
}

function loaded(booleanTraining)
{
	// set up starting positions

	var vSpan_r0c0 = document.getElementById("span_r0c0");
	var vUpImage = document.getElementById("upimage");
	var vDownImage = document.getElementById("downimage");
	var vLeftImage_0 = document.getElementById("leftimage_0");
	var vRightImage_0 = document.getElementById("rightimage_0");

	vSpan_r0c0.innerHTML = "<input type='text' size='10' name='text_r0c0' onkeyup='setTextValue(0,0,this.value);' value=''>";

	vUpImage.innerHTML = "<img src='<%=sImageURL%>/uparrow_grey.gif'/>";
	vDownImage.innerHTML = "<a href='javascript:expandDown()'><img src='<%=sImageURL%>/downarrow.gif'/></a>";
	vLeftImage_0.innerHTML = "<img src='<%=sImageURL%>/leftarrow_grey.gif'/>";
	vRightImage_0.innerHTML = "<a href='javascript:expandRight(0)'><img src='<%=sImageURL%>/rightarrow.gif'/></a>";

	populateBoolean(booleanTraining);
}

function checkValidBoolean()
{

	str = document.cattraining['<%=booleanTrainingInputName%>'].value = booleanTraining;

	var singleQuoteIdx = str.indexOf("\'");
	var doubleQuoteIdx = str.indexOf("\"");
	var hashIdx = str.indexOf("#");

	if(singleQuoteIdx >= 0)
	{
		alert('Invalid character: \'');
		return false;
	}
	if(doubleQuoteIdx >= 0)
	{
		alert('Invalid character: "');
		return false;
	}
	if(hashIdx >= 0)
	{
		alert('Invalid character: #');
		return false;
	}

	var arr = str.split(" ");
	var nBracket = 0;
	var nRowIdx=0;

	if (isBoolWord(arr[0]) == true)
	{
		alert('Invalid boolean expression: '+arr[0]);
		return false;
	}
	else if (isBoolWord(arr[arr.length-1]) == true)
	{
		alert('Invalid boolean expression '+arr[arr.length-1]);
   		return false;
	}
	else
	{
		// count levels of bracketed expressions. Should end up matching
		// and never at any point have more closing brackets than we've opened
		for (nRowIdx=0;nRowIdx<arr.length;nRowIdx++)
		{
			if (arr[nRowIdx] == "(")
				nBracket++;
			else if (arr[nRowIdx] == ")")
				nBracket--;

			if (nBracket < 0)
			{
				var str = "";
				if (nRowIdx>0)
					str = arr[nRowIdx-1] + " ";

				str += arr[nRowIdx];

				if (nRowIdx<arr.length-1)
					str += " " + arr[nRowIdx+1];

				alert("Invalid Boolean Expression"+" "+str);
				return false;
			}
		}
		if (nBracket != 0)
		{
			alert("Invalid Boolean Expression");
			return false;
		}

		for (nRowIdx=0;nRowIdx<arr.length-1;nRowIdx++)
		{
			var thisBool = isBoolWord(arr[nRowIdx]);
			var nextBool = isBoolWord(arr[nRowIdx+1]);

			// open bracket must be followed by a non-bool word - '( cat AND dog )'
			// close bracket must be followed by a bool word - '( cat AND dog ) OR fish'
			// non-brackets - we can't have two bool or non-bool words in a row
			var bOK = true;

			// check for these failure conditions:
			if (thisBool == true)
			{
				// AND OR
				if (nextBool == true)
					bOK = false;

				// AND )
				if (arr[nRowIdx+1] == ")")
					bOK = false;
			}
			else
			{
				// dog )  <-- this is OK
				if (arr[nRowIdx+1] == ")")
					continue;

				// ( AND
				if (arr[nRowIdx] == "(" && nextBool == true)
					bOK = false;

				// ) cat
				if (arr[nRowIdx] == ")" && nextBool == false)
					bOK = false;
			}

			if (bOK == false)
			{
				alert("Invalid boolean expression "+" " + arr[nRowIdx] + " " + arr[nRowIdx+1]);
				return false;
			}
		}
	}

	return true;
}
</script>

<%
                        for (int nRowIdx=0; nRowIdx < BOOLEAN_MAX_ROWS ; nRowIdx++)
                        {
%>
                                <tr>
                                        <td valign="center">
                                                <center>
<%
                                                        for (int nColIdx=0;nColIdx < BOOLEAN_MAX_COLS;nColIdx++)
                                                        {
%>
                                                               <span id="span_r<%=nRowIdx%>c<%=nColIdx%>" onkeyup="javascript:makeBoolString();"></span>
<%
                                                        }
%>
                                                        <span id="leftimage_<%=nRowIdx%>"></span>
                                                        <span id="rightimage_<%=nRowIdx%>"></span>
                                                        <span id="vexpandselect_<%=nRowIdx%>" onclick="javascript:makeBoolString();"></span>
                                                </center>
                                        </td>
                                </tr>
<%
                        }
%>
                                <tr>
                                        <td>
                                                <center>
                                                        <div id="upimage"></div>
                                                        <div id="downimage"></div>
                                                </center>
                                        </td>
                                </tr>
                                <tr>
                                        <td >
						<input name="<%=booleanTrainingInputName%>" readonly="yes" type="text" size="47" style="position:relative;font-family:arial;font-size:13px" value="<%= booleanTraining %>">
                                        </td>
                                </tr>

<script>
	loaded("<%=booleanTraining%>");
</script>