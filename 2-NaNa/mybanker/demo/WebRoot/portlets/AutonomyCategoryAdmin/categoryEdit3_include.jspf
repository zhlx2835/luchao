<%@ page import="com.autonomy.portlet.constants.CATConstants"%>
<%@ page import="com.autonomy.aci.businessobjects.Category"%>
<%@ page import="com.autonomy.aci.businessobjects.CategoryTrainingDocument"%>
<%@ page import="com.autonomy.utilities.HTTPFileUpload"%>

<%
// this page updates the category's details and training on Laune, builds the category and retrieves
// its results before setting the updated category and results on the session

// put everything in this page in its own scope so as not to interfere with other included pages
{
	// get category from session
	Category category = (Category)session.getAttribute(CATConstants.SESSION_ATTRIB_SELECTED_CAT);

	if(category == null)
	{
		setError(session, rb.getString("categoryView.error.noCatSelected"));
		sMainPage = CATConstants.JSP_PAGE_MAIN;
	}

	// get Laune Service from session
	IDOLService idol = (IDOLService)session.getAttribute(CATConstants.SESSION_ATTRIB_IDOL);
	if(idol == null)
	{
		setError(session, rb.getString("categoryView.error.noChFuncAvailable"));
		sMainPage = CATConstants.JSP_PAGE_MAIN;
	}
%>

<%@ include file="showError_include.jspf" %>

<%
	if(category != null && idol != null)
	{
		// the form that was submitted to get here is a multipart type to allow training files to be uploaded
		// so we have to use the HTTPFileUpload class to pull out form parameters even if no file
		// is being uploaded

		int nMaxFileSizeKBs = StringUtils.atoi(service.readConfigParameter("MaxUploadFileSizeKBs", "1024"), 1024);

		String sUploadParameter = service.readConfigParameter("DisplayTrainingFileUpload", "false");

		String sUploadFileName="";
		HTTPFileUpload upload=null;
		String sTrainingText="";
		String sBooleanText="";
		String[] asTrainingFiles = null;

		// This is needed for Websphere portal as the InputStream has already been read by the portal
		// We can get the parameters from the request as the Websphere build script modifies the categoryEdit2.jsp cattraining form to remove the ENCTYPE bit

		if(sUploadParameter.equals("true"))
		{
			upload = new HTTPFileUpload(request.getInputStream(), service.getTempDir(), nMaxFileSizeKBs*1024, 1024);

			// if there is a file to upload, upload and add it to category training and return to initial training page
			// otherwise, make modifications to category training and move on to next page (sample results)
			sUploadFileName = readUploadFileName(upload);

			sTrainingText = upload.getParameter(service.makeParameterName(CATConstants.REQUEST_PARAM_TRAINING_TEXT));
			sBooleanText = upload.getParameter(service.makeParameterName(CATConstants.REQUEST_PARAM_TRAINING_BOOLEAN));
			asTrainingFiles =  upload.getParameterValues(service.makeParameterName(CATConstants.REQUEST_PARAM_TRAINING_FILES));
		}
		else
		{
			sTrainingText = request.getParameter(service.makeParameterName(CATConstants.REQUEST_PARAM_TRAINING_TEXT));
			sBooleanText = request.getParameter(service.makeParameterName(CATConstants.REQUEST_PARAM_TRAINING_BOOLEAN));
			asTrainingFiles = request.getParameterValues(service.makeParameterName(CATConstants.REQUEST_PARAM_TRAINING_FILES));
		}

		if(StringUtils.strValid(sUploadFileName))
		{
%>
			<%@ include file="categoryUpload_include.jspf" %>
<%
		}
		else
		{
			// read modified training from request and set on category
			if(StringUtils.strValid(sTrainingText))
			{
				category.setTrainingText(sTrainingText);
			}
			if(StringUtils.strValid(sBooleanText))
			{
				category.setBooleanTraining(sBooleanText);
			}
			else
			{
				category.setBooleanTraining("");
			}

			// remove unchecked training files from those set on category
			 category.setTrainingDocs(filterCheckedFiles(asTrainingFiles, category));


			// update category
%>
			<%@ include file="updateAndQueryCategory_include.jspf" %>
<%
		}
	}
}
%>

<%!
private ArrayList filterCheckedFiles(String[] asFilesFromRequest, Category category)
{
	ArrayList alCheckedTrainingDocs = new ArrayList();
	if(asFilesFromRequest != null && category != null)
	{
		ArrayList alOrigTrainingDocs = category.getTrainingDocs();
		for(int nOrigDocIdx = 0; nOrigDocIdx < alOrigTrainingDocs.size(); nOrigDocIdx++)
		{
			CategoryTrainingDocument doc = (CategoryTrainingDocument)alOrigTrainingDocs.get(nOrigDocIdx);
			if(StringUtils.isStringInStringArray(asFilesFromRequest, doc.getDocReference(), false) != -1)
			{
				alCheckedTrainingDocs.add(doc);
			}
		}
	}
	return alCheckedTrainingDocs;
}

private String readUploadFileName(HTTPFileUpload upload)
{
	String sFileName = "";
	if(upload != null)
	{
		Enumeration enFileNames = upload.getFileNames();
		if(enFileNames.hasMoreElements())
		{
			sFileName = (String)enFileNames.nextElement();
		}
	}
	return sFileName;
}
%>