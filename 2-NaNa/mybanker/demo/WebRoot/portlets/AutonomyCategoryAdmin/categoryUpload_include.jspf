<%@ page import="com.autonomy.aci.AciAction" %>
<%@ page import="com.autonomy.aci.AciConnection" %>
<%@ page import="com.autonomy.aci.AciResponse" %>
<%@ page import="com.autonomy.aci.ActionParameter" %>
<%@ page import="com.autonomy.aci.businessobjects.CategoryTrainingDocument" %>
<%@ page import="com.autonomy.encryption.BTEAEncryptionDetails" %>
<%@ page import="com.autonomy.encryption.BTEAEncrypt" %>
<%@ page import="com.autonomy.encryption.EncryptionException" %>

<%@ page import="java.io.File" %>
<%@ page import="java.io.FileNotFoundException" %>

<%
try
{
    // import file using FileSystemFetch and extract document contents from response
    String sImportedFileContents = importFile(sUploadFileName, service);
    if(StringUtils.strValid(sImportedFileContents))
    {
        // set document contents as new training document on category
        CategoryTrainingDocument trainingDoc = new CategoryTrainingDocument();
        trainingDoc.setTitle(upload.getOriginalFilename(sUploadFileName));
        trainingDoc.setContent(sImportedFileContents);
        trainingDoc.setType(CategoryTrainingDocument.TRAINING_TYPE_UPLOAD);

        category.addTrainingDoc(trainingDoc);

        // update category
%>
        <%@ include file="updateCategory_include.jspf" %>
<%
    }
    else
    {
        setError(session, rb.getString("categoryUpload_include.error.noTextualContent") );
    }

    // delete temporary file
    new File(sUploadFileName).delete();
}
catch(AciException acie)
{
    setError(session, (rb.getString("categoryUpload_include.error.importing")) + acie.getMessage());
}
// return to 'Initial Training' page
sMainPage = CATConstants.JSP_PAGE_CAT_EDIT_2;
%>



<%!
private String importFile(String sFileName, PortalService service) throws AciException, EncryptionException, FileNotFoundException
{
    String sImportedContents = "";

    if(StringUtils.strValid(sFileName))
    {
        // read FileSystemFetch details from config and create connection
        AciConnection acicFileSystemFetch = constructFileSystemFetch(service);

        AciAction importAction = new AciAction("Import");
        importAction.setParameter(new ActionParameter("FileName", sFileName));
        importAction.setParameter(new ActionParameter("ImportToACIBuffer", true));

        importAction.usePostHTTPMethod();
        AciResponse response = acicFileSystemFetch.aciActionExecute(importAction);
        if(response != null)
        {
            sImportedContents = response.getTagValue("DRECONTENT", "");
        }
    }

    return sImportedContents;
}

private AciConnection constructFileSystemFetch(PortalService service)
{
    AciConnection acicFileSystemFetch = new AciConnection();
    acicFileSystemFetch.setAciHost(service.readConfigParameter("FileSystemFetchHost", ""));
    acicFileSystemFetch.setAciPort(StringUtils.atoi(service.readConfigParameter("FileSystemFetchPort", "0"), 0));
    acicFileSystemFetch.setTimeout(1000000);
    acicFileSystemFetch.setRetries(1);
    acicFileSystemFetch.setCharacterEncoding("UTF-8");

    return acicFileSystemFetch;
}

public void log(String s)
{
    System.out.println(s);
}
%>